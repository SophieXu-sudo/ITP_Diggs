import streamlit as st
from streamlit_chat import message
import docxReader
import pdfReader
import txtReader
import file_embedding
# Import the chat page and training functions
from UI_setup import setup
import response_generator



def chat_page():
    
    user_input=st.text_input("You:",key='input',on_change=clear_text)

    if st.session_state["temp"]:
        user_input = st.session_state["temp"]
        # df now is directly ggenerated by our docxReader, will adjust here when database is ready
        df = docxReader.docxreader('Diggs Info Repository Products Example.docx')
        df  = file_embedding.embeddings(df)
        #chatbot = response_generator.Chatbot
        # generate prompt for GPT3.5
        prompt = chatbot.create_prompt(df,user_input)
        # ask AI model for answer
        output=chatbot.gpt(prompt)['answer']
        st.session_state['past'].append(user_input)
        st.session_state['generated'].append(output)
        
        # clean the input box
        
    # generate response in chatpage
    if st.session_state['generated']:
        print(len(st.session_state['generated']))
        for i in range(len(st.session_state['generated'])-1, -1, -1):
        #for i in range(len(st.session_state['generated'])):
            message(st.session_state['past'][i],is_user=True,key=str(i)+'_user')
            message(st.session_state["generated"][i], key=str(i))
# Set up the main Streamlit app
@st.cache_resource
def set_chatbot():
    chatbot = response_generator.Chatbot()
    print("created class chatbot")
    return chatbot
def clear_text():
    st.session_state["temp"] = st.session_state["input"]
    st.session_state["input"] = ""

#st.set_page_config(page_title="Diggs AI chatbot",page_icon=":dog:",)
setup()
chatbot = set_chatbot()

st.title("Diggs Chatbot v3.0")
print('chat_page start to run')
if 'generated' not in st.session_state:
    st.session_state['generated'] = []
    print('generate session state')
if 'past' not in st.session_state:
    st.session_state['past'] = []
if 'temp' not in st.session_state:
    st.session_state['temp'] = []

# Add sidebar to let user upload new documents to be stored into database
file = st.sidebar.file_uploader("Upload a document", type=['txt','docx','pdf'], key='file',accept_multiple_files=False)
if file is not None:
      filename=file.name
      parts = filename.split(".")
      if parts[-1]=='docx':
        df=docxReader.docxreader(file)
        df=file_embedding.embeddings(df)
        st.write(df)
      elif parts[-1]=='pdf':
        df= pdfReader.pdfreader(file)
        df=file_embedding.embeddings(df)
        st.write(df)
      elif parts[-1]=='txt':
        df= txtReader.txtreader(file)
        df=file_embedding.embeddings(df)
        st.write(df)
# If user selects to train the chatbot, display the training page
#if train_model:
    #train_chatbot()

# Display the chat page
chat_page()
